on:
  push:
    tags:
      - "v*"

concurrency: ci-${{ github.ref }}

jobs:
  test:
    uses: ./.github/workflows/test.yaml

  publish-plugin:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - id: secret-check
        name: Check for Secret Availability
        run: |
          if [ "${{ secrets.GRADLE_PUBLISH_KEY }}" != '' ] && [ "${{ secrets.GRADLE_PUBLISH_SECRET }}" != '' ]; then
            echo "available=true" >> $GITHUB_OUTPUT;
          else
            echo "available=false" >> $GITHUB_OUTPUT;
          fi

      - name: Checkout
        if: ${{ steps.secret-check.outputs.available == 'true' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Gradle
        if: ${{ steps.secret-check.outputs.available == 'true' }}
        uses: gradle/gradle-build-action@v2

      - name: Publish
        if: ${{ steps.secret-check.outputs.available == 'true' }}
        run: |
          ./gradlew :gradle-plugin:publishPlugins -Pgradle.publish.key=${{ secrets.GRADLE_PUBLISH_KEY }} -Pgradle.publish.secret=${{ secrets.GRADLE_PUBLISH_SECRET }}

      # todo: this doesn't fail when the gradle command fails
      - id: get-version
        name: Get Version
        if: ${{ steps.secret-check.outputs.available == 'true' }}
        run: |
          echo "version=$(./gradlew version -q)" >> $GITHUB_OUTPUT

      - name: Update Versions
        if: ${{ steps.secret-check.outputs.available == 'true' }}
        run: |
          sed -ie "s/version \"[^\"]*\"/version \"${{ steps.get-version.outputs.version }}\"/" examples/*/*/settings.gradle.kts

      - name: Commit Version Updates
        if: ${{ steps.secret-check.outputs.available == 'true' }}
        uses: test-room-7/action-update-file@v1
        with:
          file-path: |
            examples/*/*/settings.gradle.kts
          commit-msg: Update version
          github-token: ${{ secrets.GITHUB_TOKEN }}

  publish-executables:
    needs: [publish-plugin]
    permissions:
      contents: write
    strategy:
      matrix:
        target: [macos-arm64, macos-x64, ubuntu-x64, windows-x64]
        include:
          - target: ubuntu-x64
            os: ubuntu
            runs: ubuntu-latest
            platform-name: linuxX64
            release-file: bootstrapper.kexe
            asset-name: graboo-linux-x64
          - target: macos-arm64
            os: macos
            runs: macos-latest
            platform-name: macosArm64
            release-file: bootstrapper.kexe
            asset-name: graboo-macos-arm64
          - target: macos-x64
            os: macos
            runs: macos-latest
            platform-name: macosX64
            release-file: bootstrapper.kexe
            asset-name: graboo-macos-x64
          - target: windows-x64
            os: windows
            runs: windows-latest
            platform-name: mingwX64
            release-file: bootstrapper.exe
            asset-name: graboo-windows-x64.exe
    runs-on: ${{ matrix.runs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Install Dependencies
        if: matrix.os == 'ubuntu'
        run: |
          sudo apt update
          sudo apt-get install libcurl4-openssl-dev

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: graboo executable
        run: |
          ./gradlew :bootstrapper:linkReleaseExecutable${{ matrix.platform-name }}

      - name: run upx
        if: false
        uses: svenstaro/upx-action@v2
        with:
          files: bootstrapper/build/bin/${{ matrix.platform-name }}/releaseExecutable/${{ matrix.release-file }}
          args: --best --lzma

      - name: upload executables
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset-name }}
          path: bootstrapper/build/bin/${{ matrix.platform-name }}/releaseExecutable/${{ matrix.release-file }}

      - name: release binaries
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: bootstrapper/build/bin/${{ matrix.platform-name }}/releaseExecutable/${{ matrix.release-file }}
          asset_name: ${{ matrix.asset-name }}
          overwrite: true
          tag: ${{ github.ref }}

      - name: update graboo
        if: matrix.os == 'ubuntu'
        run: |
          for f in examples/*/*; do cp -p templater/scripts/graboo $f; done

      - name: update graboo.cmd
        if: matrix.os == 'windows'
        run: |
          dir "examples/*/*" | foreach-object { copy-item -path templater/scripts/graboo.cmd -destination $_ }

      - name: test graboo on ${{ matrix.target }}
        if: matrix.target == 'ubuntu-x64' || matrix.target == 'macos-x64'
        run: |
          cd examples/javaapp/hello-world
          output=$(./graboo run)
          echo $output
          echo $output | grep --quiet "hello, world"

      - name: test graboo on ${{ matrix.target }}
        if: matrix.os == 'windows'
        run: |
          cd examples/javaapp/hello-world
          # todo: verify output
          .\graboo.cmd run

      - name: Commit graboo Updates
        if: matrix.os == 'ubuntu'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          file_pattern: 'examples/*/*/graboo'

      - name: Commit graboo.cmd Updates
        if: matrix.os == 'windows'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          file_pattern: 'examples/*/*/graboo.cmd'
